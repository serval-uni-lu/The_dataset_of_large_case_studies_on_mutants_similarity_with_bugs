diff --git a/src/test/java/org/jsoup/nodes/ElementTest.java b/src/test/java/org/jsoup/nodes/ElementTest.java
index 5225bff..546f309 100644
--- a/src/test/java/org/jsoup/nodes/ElementTest.java
+++ b/src/test/java/org/jsoup/nodes/ElementTest.java
@@ -1199,24 +1199,6 @@ public class ElementTest {
         Element matched = doc.select("p:contains(get what you want)").first();
         assertEquals("p", matched.nodeName());
         assertTrue(matched.is(":containsOwn(get what you want)"));
-    }
-
-    @Test public void testNormalizesInvisiblesInText() {
-        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);
-        String escaped = "This&shy;is&#x200b;one&#x200c;long&#x200d;word";
-        String decoded = "This\u00ADis\u200Bone\u200Clong\u200Dword"; // browser would not display those soft hyphens / other chars, so we don't want them in the text
-
-        Document doc = Jsoup.parse("<p>" + escaped);
-        Element p = doc.select("p").first();
-        doc.outputSettings().charset("ascii"); // so that the outer html is easier to see with escaped invisibles
-        assertEquals("Thisisonelongword", p.text()); // text is normalized
-        assertEquals("<p>" + escaped + "</p>", p.outerHtml()); // html / whole text keeps &shy etc;
-        assertEquals(decoded, p.textNodes().get(0).getWholeText());
-
-        Element matched = doc.select("p:contains(Thisisonelongword)").first(); // really just oneloneword, no invisibles
-        assertEquals("p", matched.nodeName());
-        assertTrue(matched.is(":containsOwn(Thisisonelongword)"));
-
     }
 	
 	@Test

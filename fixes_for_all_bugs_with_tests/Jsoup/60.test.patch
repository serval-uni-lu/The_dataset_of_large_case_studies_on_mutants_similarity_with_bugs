diff --git a/src/test/java/org/jsoup/integration/ParseTest.java b/src/test/java/org/jsoup/integration/ParseTest.java
index ae14bed..c5e6eae 100644
--- a/src/test/java/org/jsoup/integration/ParseTest.java
+++ b/src/test/java/org/jsoup/integration/ParseTest.java
@@ -164,7 +164,7 @@ public class ParseTest {
     public void testYahooArticle() throws IOException {
         File in = getFile("/htmltests/yahoo-article-1.html");
         Document doc = Jsoup.parse(in, "UTF-8", "http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china");
-        Element p = doc.select("p:contains(Volt will be sold in the United States)").first();
+        Element p = doc.select("p:contains(Volt will be sold in the United States").first();
         assertEquals("In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.", p.text());
     }
 
diff --git a/src/test/java/org/jsoup/parser/TokenQueueTest.java b/src/test/java/org/jsoup/parser/TokenQueueTest.java
index d80a4e9..802d19b 100644
--- a/src/test/java/org/jsoup/parser/TokenQueueTest.java
+++ b/src/test/java/org/jsoup/parser/TokenQueueTest.java
@@ -31,10 +31,10 @@ public class TokenQueueTest {
     }
 
     @Test public void chompBalancedMatchesAsMuchAsPossible() {
-        TokenQueue tq = new TokenQueue("unbalanced(something(or another)) else");
+        TokenQueue tq = new TokenQueue("unbalanced(something(or another");
         tq.consumeTo("(");
         String match = tq.chompBalanced('(', ')');
-        assertEquals("something(or another)", match);
+        assertEquals("something(or another", match);
     }
     
     @Test public void unescape() {
diff --git a/src/test/java/org/jsoup/select/QueryParserTest.java b/src/test/java/org/jsoup/select/QueryParserTest.java
index 0720e47..5bf3d56 100644
--- a/src/test/java/org/jsoup/select/QueryParserTest.java
+++ b/src/test/java/org/jsoup/select/QueryParserTest.java
@@ -40,11 +40,12 @@ public class QueryParserTest {
         assertEquals(2, andLeft.evaluators.size());
     }
 
-    @Test(expected = Selector.SelectorParseException.class) public void exceptionOnUncloseAttribute() {
-        Evaluator parse = QueryParser.parse("section > a[href=\"]");
-    }
-
-    @Test(expected = Selector.SelectorParseException.class)  public void testParsesSingleQuoteInContains() {
-        Evaluator parse = QueryParser.parse("p:contains(One \" One)");
+    @Test public void exceptionOnUncloseAttribute() {
+        boolean threw = false;
+        try {Evaluator parse = QueryParser.parse("section > a[href=\"");}
+        catch (IllegalArgumentException e) {
+            threw = true;
+        }
+        assertTrue(threw);
     }
 }
diff --git a/src/test/java/org/jsoup/select/SelectorTest.java b/src/test/java/org/jsoup/select/SelectorTest.java
index c04a42a..0b380b3 100644
--- a/src/test/java/org/jsoup/select/SelectorTest.java
+++ b/src/test/java/org/jsoup/select/SelectorTest.java
@@ -330,7 +330,7 @@ public class SelectorTest {
         assertEquals(2, doc.select("DiV").size());
         assertEquals(1, doc.select("DiV[TiTLE]").size());
         assertEquals(1, doc.select("DiV[TiTLE=BAR]").size());
-        assertEquals(0, doc.select("DiV[TiTLE=BARBARELLA]").size());
+        assertEquals(0, doc.select("DiV[TiTLE=BARBARELLA").size());
     }
 
     @Test public void adjacentSiblings() {
@@ -472,7 +472,7 @@ public class SelectorTest {
         assertEquals("0", divs1.get(0).id());
         assertEquals("1", divs1.get(1).id());
 
-        Elements divs2 = doc.select("div:has([class])");
+        Elements divs2 = doc.select("div:has([class]");
         assertEquals(1, divs2.size());
         assertEquals("1", divs2.get(0).id());
 
@@ -687,10 +687,10 @@ public class SelectorTest {
     @Test public void attributeWithBrackets() {
         String html = "<div data='End]'>One</div> <div data='[Another)]]'>Two</div>";
         Document doc = Jsoup.parse(html);
-        assertEquals("One", doc.select("div[data='End]']").first().text());
-        assertEquals("Two", doc.select("div[data='[Another)]]']").first().text());
-        assertEquals("One", doc.select("div[data=\"End]\"]").first().text());
-        assertEquals("Two", doc.select("div[data=\"[Another)]]\"]").first().text());
+        assertEquals("One", doc.select("div[data='End]'").first().text());
+        assertEquals("Two", doc.select("div[data='[Another)]]'").first().text());
+        assertEquals("One", doc.select("div[data=\"End]\"").first().text());
+        assertEquals("Two", doc.select("div[data=\"[Another)]]\"").first().text());
     }
 
     @Test public void containsData() {
@@ -714,12 +714,4 @@ public class SelectorTest {
         assertEquals("script", dataEls4.get(1).tagName());
         assertEquals("span", dataEls4.get(2).tagName());
     }
-
-    @Test public void containsWithQuote() {
-        String html = "<p>One'One</p><p>One'Two</p>";
-        Document doc = Jsoup.parse(html);
-        Elements els = doc.select("p:contains(One\\'One)");
-        assertEquals(1, els.size());
-        assertEquals("One'One", els.text());
-    }
 }

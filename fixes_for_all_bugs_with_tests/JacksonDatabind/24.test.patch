diff --git a/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest.java b/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest.java
index 6d501cace..6184e180d 100644
--- a/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest.java
+++ b/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest.java
@@ -36,7 +36,7 @@ public class DateSerializationTest
         public java.sql.Date date;
         public SqlDateAsNumberBean(long l) { date = new java.sql.Date(l); }
     }
-
+    
     static class DateAsStringBean {
         @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd")
         public Date date;
@@ -88,8 +88,8 @@ public class DateSerializationTest
     {
         ObjectMapper mapper = new ObjectMapper();
         DateFormat df = new SimpleDateFormat("yyyy-MM-dd'X'HH:mm:ss");
+        df.setTimeZone(TimeZone.getTimeZone("PST"));
         mapper.setDateFormat(df);
-        mapper.setTimeZone(TimeZone.getTimeZone("PST"));
         // let's hit epoch start, offset by a bit
         assertEquals(quote("1969-12-31X16:00:00"), mapper.writeValueAsString(new Date(0L)));
     }
@@ -124,29 +124,30 @@ public class DateSerializationTest
         assertEquals(quote("PST"), json);
     }
 
+    // [JACKSON-663]
     public void testTimeZoneInBean() throws IOException
     {
         String json = MAPPER.writeValueAsString(new TimeZoneBean("PST"));
         assertEquals("{\"tz\":\"PST\"}", json);
     }
 
+    // [JACKSON-648]: (re)configuring via ObjectWriter
     public void testDateUsingObjectWriter() throws IOException
     {
         DateFormat df = new SimpleDateFormat("yyyy-MM-dd'X'HH:mm:ss");
-        TimeZone tz = TimeZone.getTimeZone("PST");
+        df.setTimeZone(TimeZone.getTimeZone("PST"));
         assertEquals(quote("1969-12-31X16:00:00"),
-                MAPPER.writer(df)
-                    .with(tz)
-                    .writeValueAsString(new Date(0L)));
+                MAPPER.writer(df).writeValueAsString(new Date(0L)));
         ObjectWriter w = MAPPER.writer((DateFormat)null);
         assertEquals("0", w.writeValueAsString(new Date(0L)));
 
-        w = w.with(df).with(tz);
+        w = w.with(df);
         assertEquals(quote("1969-12-31X16:00:00"), w.writeValueAsString(new Date(0L)));
         w = w.with((DateFormat) null);
         assertEquals("0", w.writeValueAsString(new Date(0L)));
     }
 
+    // [JACKSON-606]
     public void testDatesAsMapKeys() throws IOException
     {
         ObjectMapper mapper = new ObjectMapper();
@@ -161,6 +162,7 @@ public class DateSerializationTest
         assertEquals("{\"0\":1}", mapper.writeValueAsString(map));
     }
 
+    // [JACKSON-435]
     public void testDateWithJsonFormat() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
diff --git a/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java b/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java
index 3f224e625..c9141ec8d 100644
--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java
+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java
@@ -208,10 +208,6 @@ public class TestConfig
         mapper.setTimeZone(tz1);
         assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());
         assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());
-
-        // also better stick via reader/writer as well
-        assertEquals(tz1, mapper.writer().getConfig().getTimeZone());
-        assertEquals(tz1, mapper.reader().getConfig().getTimeZone());
         
         SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
         f.setTimeZone(tz2);
@@ -220,8 +216,6 @@ public class TestConfig
         // should not change the timezone tho
         assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());
         assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());
-        assertEquals(tz1, mapper.writer().getConfig().getTimeZone());
-        assertEquals(tz1, mapper.reader().getConfig().getTimeZone());
     }
     
     private final static String getLF() {

diff --git a/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes.java b/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes.java
index 871a929b2..dd253c38c 100644
--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes.java
+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes.java
@@ -7,7 +7,6 @@ import java.util.concurrent.atomic.*;
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 public class TestJDKAtomicTypes
     extends com.fasterxml.jackson.databind.BaseMapTest
@@ -87,13 +86,6 @@ public class TestJDKAtomicTypes
         public LCStringWrapper() { }
     }
 
-    @JsonPropertyOrder({ "a", "b" })
-    static class Issue1256Bean {
-        @JsonSerialize(as=AtomicReference.class)
-        public Object a = new AtomicReference<Object>();
-        public AtomicReference<Object> b = new AtomicReference<Object>();
-    }
-
     /*
     /**********************************************************
     /* Test methods
@@ -258,13 +250,4 @@ public class TestJDKAtomicTypes
                 LCStringWrapper.class);
         assertEquals("foobar", w.value.get());
     }
-
-    public void testEmpty1256() throws Exception
-    {
-        ObjectMapper mapper = new ObjectMapper();
-        mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);
-
-        String json = mapper.writeValueAsString(new Issue1256Bean());
-        assertEquals("{}", json);
-    }
 }
diff --git a/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288.java b/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288.java
index d756d4045..1bc2d3e03 100644
--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288.java
+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288.java
@@ -1,15 +1,21 @@
 package com.fasterxml.jackson.databind.jsontype.ext;
 
+import java.io.IOException;
 import java.util.UUID;
 
+import org.junit.Test;
+
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
+import com.fasterxml.jackson.core.JsonParseException;
+
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
+import com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest1288.ClassesWithBuilder.PaymentMean;
 import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
 
 @SuppressWarnings("hiding")
@@ -504,10 +510,12 @@ public class ExternalTypeIdTest1288 extends BaseMapTest
                 + "\"csc\":666,\"address\":\"10 boulevard de Sebastopol\",\"zip_code\":\"75001\",\"city\":\"Paris\",\"province\":\"Ile-de-France\",\"country_code\":\"FR\",\"description\":\"John Doe personal credit card\"}}";
         final String asJson2 = "{\"form_of_payment\":\"INSTRUMENTED_CREDIT_CARD\",\"payment_details\":{\"payment_instrument_id\":\"00000000-0000-0000-0000-000000000000\", \"name\":\"Mr John Doe encrypted credit card\"}}";
         final ObjectMapper objectMapper = new ObjectMapper ().setPropertyNamingStrategy (PropertyNamingStrategy.SNAKE_CASE);
+//                .disable (DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
 
         ClassesWithoutBuilder.PaymentMean ob1 = objectMapper.readValue (asJson1, ClassesWithoutBuilder.PaymentMean.class);
         assertNotNull(ob1);
         ClassesWithBuilder.PaymentMean ob2 = objectMapper.readValue (asJson2, ClassesWithBuilder.PaymentMean.class);
         assertNotNull(ob2);
+
     }
 }
diff --git a/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java b/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
index 91be3f7a7..858b91cf1 100644
--- a/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
+++ b/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
@@ -185,16 +185,4 @@ public class TestJavaType
         assertFalse(rt.isAnchorType());
         assertEquals(AtomicReference.class, rt.getAnchorType().getRawClass());
     }
-
-    // for [databind#1290]
-    public void testObjectToReferenceSpecialization() throws Exception
-    {
-        TypeFactory tf = TypeFactory.defaultInstance();
-        JavaType base = tf.constructType(Object.class);
-        assertTrue(base.isJavaLangObject());
-
-        JavaType sub = tf.constructSpecializedType(base, AtomicReference.class);
-        assertEquals(AtomicReference.class, sub.getRawClass());
-        assertTrue(sub.isReferenceType());
-    }
 }

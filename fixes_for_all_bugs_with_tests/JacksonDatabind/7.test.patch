diff --git a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java
index ffa1602ca..aa750c243 100644
--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java
+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java
@@ -2,10 +2,8 @@ package com.fasterxml.jackson.databind.creators;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JacksonInject;
-import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonToken;
+
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.util.TokenBuffer;
 
 public class TestCreatorsDelegating extends BaseMapTest
 {
@@ -53,21 +51,7 @@ public class TestCreatorsDelegating extends BaseMapTest
             return new FactoryBean711(a, n1, n2);
         }
     }
-
-    static class Value592
-    {
-        protected Object stuff;
-
-        protected Value592(Object ob, boolean bogus) {
-            stuff = ob;
-        }
-        
-        @JsonCreator
-        public static Value592 from(TokenBuffer buffer) {
-            return new Value592(buffer, false);
-        }
-    }
-        
+    
     /*
     /**********************************************************
     /* Unit tests
@@ -119,27 +103,4 @@ public class TestCreatorsDelegating extends BaseMapTest
         assertEquals("Fygar", bean.name1);
         assertEquals("Fygar", bean.name2);
     }
-
-    // [databind#592]
-    public void testDelegateWithTokenBuffer() throws Exception
-    {
-        ObjectMapper mapper = new ObjectMapper();
-        Value592 value = mapper.readValue("{\"a\":1,\"b\":2}", Value592.class);
-        assertNotNull(value);
-        Object ob = value.stuff;
-        assertEquals(TokenBuffer.class, ob.getClass());
-        JsonParser jp = ((TokenBuffer) ob).asParser();
-        assertToken(JsonToken.START_OBJECT, jp.nextToken());
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken());
-        assertEquals("a", jp.getCurrentName());
-        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());
-        assertEquals(1, jp.getIntValue());
-        assertToken(JsonToken.FIELD_NAME, jp.nextToken());
-        assertEquals("b", jp.getCurrentName());
-        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());
-        assertEquals(2, jp.getIntValue());
-        assertToken(JsonToken.END_OBJECT, jp.nextToken());
-        jp.close();
-    }
-
 }

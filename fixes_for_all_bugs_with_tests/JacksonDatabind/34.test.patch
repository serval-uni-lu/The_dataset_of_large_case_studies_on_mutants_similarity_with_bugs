diff --git a/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java b/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
index 7dae9422e..f00681385 100644
--- a/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
+++ b/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
@@ -253,8 +253,4 @@ public abstract class BaseMapTest
     protected static String aposToQuotes(String json) {
         return json.replace("'", "\"");
     }
-
-    protected static String quotesToApos(String json) {
-        return json.replace("\"", "'");
-    }
 }
diff --git a/src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest.java b/src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest.java
index c17287f92..edccfb520 100644
--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest.java
+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest.java
@@ -1,15 +1,12 @@
 package com.fasterxml.jackson.databind.jsonschema;
 
-import java.math.BigDecimal;
-import java.math.BigInteger;
 import java.util.*;
 
-import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 import com.fasterxml.jackson.annotation.JsonValue;
-import com.fasterxml.jackson.core.JsonParser.NumberType;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.*;
-import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
 
 /**
  * Basic tests to exercise low-level support added for JSON Schema module and
@@ -45,12 +42,6 @@ public class NewSchemaTest extends BaseMapTest
         public EnumMap<TestEnum,Double> weights;
     }
 
-    @JsonPropertyOrder({ "dec", "bigInt" })
-    static class Numbers {
-        public BigDecimal dec;
-        public BigInteger bigInt;
-    }
-
     /*
     /**********************************************************
     /* Test methods
@@ -134,74 +125,4 @@ public class NewSchemaTest extends BaseMapTest
         // and second, deserialize ok from that as well
         assertSame(JsonValueFormat.HOST_NAME, MAPPER.readValue(EXP, JsonValueFormat.class));
     }
-
-    // [databind#1045], regression wrt BigDecimal
-    public void testSimpleNumbers() throws Exception
-    {
-        final StringBuilder sb = new StringBuilder();
-        
-        MAPPER.acceptJsonFormatVisitor(Numbers.class,
-                new JsonFormatVisitorWrapper.Base() {
-            @Override
-            public JsonObjectFormatVisitor expectObjectFormat(final JavaType type) {
-                return new JsonObjectFormatVisitor.Base(getProvider()) {
-                    @Override
-                    public void optionalProperty(BeanProperty prop) throws JsonMappingException {
-                        sb.append("[optProp ").append(prop.getName()).append("(");
-                        JsonSerializer<Object> ser = null;
-                        if (prop instanceof BeanPropertyWriter) {
-                            BeanPropertyWriter bpw = (BeanPropertyWriter) prop;
-                            ser = bpw.getSerializer();
-                        }
-                        final SerializerProvider prov = getProvider();
-                        if (ser == null) {
-                            ser = prov.findValueSerializer(prop.getType(), prop);
-                        }
-                        ser.acceptJsonFormatVisitor(new JsonFormatVisitorWrapper.Base() {
-                            @Override
-                            public JsonNumberFormatVisitor expectNumberFormat(
-                                    JavaType type) throws JsonMappingException {
-                                return new JsonNumberFormatVisitor() {
-                                    @Override
-                                    public void format(JsonValueFormat format) {
-                                        sb.append("[numberFormat=").append(format).append("]");
-                                    }
-
-                                    @Override
-                                    public void enumTypes(Set<String> enums) { }
-
-                                    @Override
-                                    public void numberType(NumberType numberType) {
-                                        sb.append("[numberType=").append(numberType).append("]");
-                                    }
-                                };
-                            }
-
-                            @Override
-                            public JsonIntegerFormatVisitor expectIntegerFormat(JavaType type) throws JsonMappingException {
-                                return new JsonIntegerFormatVisitor() {
-                                    @Override
-                                    public void format(JsonValueFormat format) {
-                                        sb.append("[integerFormat=").append(format).append("]");
-                                    }
-
-                                    @Override
-                                    public void enumTypes(Set<String> enums) { }
-
-                                    @Override
-                                    public void numberType(NumberType numberType) {
-                                        sb.append("[numberType=").append(numberType).append("]");
-                                    }
-                                };
-                            }
-                        }, prop.getType());
-
-                        sb.append(")]");
-                    }
-                };
-            }
-        });
-        assertEquals("[optProp dec([numberType=BIG_DECIMAL])][optProp bigInt([numberType=BIG_INTEGER])]",
-                sb.toString());
-    }
 }
diff --git a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java
index ea086d61b..f9fac30d4 100644
--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java
+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java
@@ -1,11 +1,10 @@
 package com.fasterxml.jackson.databind.jsonschema;
 
-import java.math.BigDecimal;
-import java.math.BigInteger;
 import java.util.Collection;
 import java.util.Map;
 
 import com.fasterxml.jackson.annotation.*;
+
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ObjectNode;
@@ -106,12 +105,6 @@ public class TestGenerateJsonSchema
     static class Name {
         public String first, last;
     }
-
-    @JsonPropertyOrder({ "dec", "bigInt" })
-    static class Numbers {
-        public BigDecimal dec;
-        public BigInteger bigInt;
-    }
     
     /*
     /**********************************************************
@@ -124,7 +117,8 @@ public class TestGenerateJsonSchema
     /**
      * tests generating json-schema stuff.
      */
-    public void testOldSchemaGeneration() throws Exception
+    public void testGeneratingJsonSchema()
+        throws Exception
     {
         JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class);
         
@@ -196,18 +190,34 @@ public class TestGenerateJsonSchema
      * Additional unit test for verifying that schema object itself
      * can be properly serialized
      */
-    public void testSchemaSerialization() throws Exception
+    public void testSchemaSerialization()
+            throws Exception
     {
         JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class);
-        Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);
-        assertNotNull(result);
-        // no need to check out full structure, just basics...
-        assertEquals("object", result.get("type"));
-        // only add 'required' if it is true...
-        assertNull(result.get("required"));
-        assertNotNull(result.get("properties"));
+	Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);
+	assertNotNull(result);
+	// no need to check out full structure, just basics...
+	assertEquals("object", result.get("type"));
+	// only add 'required' if it is true...
+	assertNull(result.get("required"));
+	assertNotNull(result.get("properties"));
+    }
+
+    public void testInvalidCall()
+        throws Exception
+    {
+        // not ok to pass null
+        try {
+            MAPPER.generateJsonSchema(null);
+            fail("Should have failed");
+        } catch (IllegalArgumentException iae) {
+            verifyException(iae, "class must be provided");
+        }
     }
 
+    /**
+     * Test for [JACKSON-454]
+     */
     public void testThatObjectsHaveNoItems() throws Exception
     {
         JsonSchema jsonSchema = MAPPER.generateJsonSchema(TrivialBean.class);
@@ -226,7 +236,7 @@ public class TestGenerateJsonSchema
                 json);
     }
 
-    // [databind#271]
+    // [Issue#271]
     public void testUnwrapping()  throws Exception
     {
         JsonSchema jsonSchema = MAPPER.generateJsonSchema(UnwrappingRoot.class);
@@ -237,14 +247,4 @@ public class TestGenerateJsonSchema
         assertEquals(EXP, json);
     }
 
-    // 
-    public void testNumberTypes()  throws Exception
-    {
-        JsonSchema jsonSchema = MAPPER.generateJsonSchema(Numbers.class);
-        String json = quotesToApos(jsonSchema.toString());
-        String EXP = "{'type':'object',"
-                +"'properties':{'dec':{'type':'number'},"
-                +"'bigInt':{'type':'integer'}}}";
-        assertEquals(EXP, json);
-    }
 }

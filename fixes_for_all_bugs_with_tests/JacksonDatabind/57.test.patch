diff --git a/src/test/java/com/fasterxml/jackson/databind/seq/ReadValuesTest.java b/src/test/java/com/fasterxml/jackson/databind/seq/ReadValuesTest.java
index 127a60230..23464bfb3 100644
--- a/src/test/java/com/fasterxml/jackson/databind/seq/ReadValuesTest.java
+++ b/src/test/java/com/fasterxml/jackson/databind/seq/ReadValuesTest.java
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind.seq;
 
-import java.io.*;
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
@@ -9,7 +8,6 @@ import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.MappingIterator;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.ObjectReader;
 
 @SuppressWarnings("resource")
 public class ReadValuesTest extends BaseMapTest
@@ -32,61 +30,14 @@ public class ReadValuesTest extends BaseMapTest
     /**********************************************************
      */
 
-    private enum Source {
-        STRING,
-        INPUT_STREAM,
-        READER,
-        BYTE_ARRAY,
-        BYTE_ARRAY_OFFSET
-        ;
-    }
-    
     private final ObjectMapper MAPPER = new ObjectMapper();
 
     public void testRootBeans() throws Exception
-    {
-        for (Source src : Source.values()) {
-            _testRootBeans(src);
-        }
-    }
-
-    private <T> MappingIterator<T> _iterator(ObjectReader r,
-            String json,
-            Source srcType) throws IOException
-    {
-        switch (srcType) {
-        case BYTE_ARRAY:
-            return r.readValues(json.getBytes("UTF-8"));
-        case BYTE_ARRAY_OFFSET:
-            {
-                ByteArrayOutputStream out = new ByteArrayOutputStream();
-                out.write(0);
-                out.write(0);
-                out.write(0);
-                out.write(json.getBytes("UTF-8"));
-                out.write(0);
-                out.write(0);
-                out.write(0);
-                byte[] b = out.toByteArray();
-                return r.readValues(b, 3, b.length-6);
-            }
-        case INPUT_STREAM:
-            return r.readValues(new ByteArrayInputStream(json.getBytes("UTF-8")));
-        case READER:
-            return r.readValues(new StringReader(json));
-        case STRING:
-        default:
-            return r.readValues(json);
-        }
-    }
-
-    private void _testRootBeans(Source srcType) throws Exception
     {
         final String JSON = "{\"a\":3}{\"a\":27}  ";
 
-        MappingIterator<Bean> it = _iterator(MAPPER.readerFor(Bean.class),
-                JSON, srcType);
-                MAPPER.readerFor(Bean.class).readValues(JSON);
+        MappingIterator<Bean> it = MAPPER.readerFor(Bean.class).readValues(JSON);
+
         assertNotNull(it.getCurrentLocation());
         assertTrue(it.hasNext());
         Bean b = it.next();

diff --git a/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java b/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java
index 44ece5a3..316a784d 100644
--- a/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java
+++ b/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java
@@ -16,15 +16,7 @@
  */
 package org.apache.commons.collections.keyvalue;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.io.Serializable;
 import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
 
 import junit.framework.Assert;
 import junit.framework.Test;
@@ -214,58 +206,4 @@ public class TestMultiKey extends TestCase {
         Assert.assertTrue(mk1.equals(null) == false);
     }
     
-    static class SystemHashCodeSimulatingKey implements Serializable {
-    	
-		private static final long serialVersionUID = 1L;
-		private final String name;
-    	private int hashCode = 1;
-
-		public SystemHashCodeSimulatingKey(String name)
-		{
-			this.name = name;
-		}
-
-		public boolean equals(Object obj)
-		{
-			return obj instanceof SystemHashCodeSimulatingKey 
-				&& name.equals(((SystemHashCodeSimulatingKey)obj).name);
-		}
-
-		public int hashCode()
-		{
-			return hashCode;
-		}
-
-		private Object readResolve() {
-			hashCode=2; // simulate different hashCode after deserialization in another process
-			return this;
-		}
-    }
-    
-    public void testEqualsAfterSerialization() throws IOException, ClassNotFoundException
-	{
-        SystemHashCodeSimulatingKey sysKey = new SystemHashCodeSimulatingKey("test");
-		MultiKey mk = new MultiKey(ONE, sysKey);
-        Map map = new HashMap();
-        map.put(mk, TWO);
-
-        // serialize
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        ObjectOutputStream out = new ObjectOutputStream(baos);
-        out.writeObject(sysKey);
-        out.writeObject(map);
-        out.close();
-
-        // deserialize
-        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
-        ObjectInputStream in = new ObjectInputStream(bais);
-        sysKey = (SystemHashCodeSimulatingKey)in.readObject(); // simulate deserialization in another process
-        Map map2 = (Map) in.readObject();
-        in.close();
-
-        assertEquals(2, sysKey.hashCode()); // different hashCode now
-
-        MultiKey mk2 = new MultiKey(ONE, sysKey);
-        assertEquals(TWO, map2.get(mk2));		
-	}
 }

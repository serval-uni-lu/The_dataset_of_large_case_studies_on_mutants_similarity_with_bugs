diff --git a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java
index ac68d72d..560a88bd 100644
--- a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java
+++ b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java
@@ -144,31 +144,6 @@ public class TestSetUniqueList extends AbstractTestList {
         assertEquals("Size should increase after addAll", 
                      size + elements.length, collection.size());
     }
-
-    public void testIntCollectionAddAll() {
-      // make a SetUniqueList with one element
-      List list = new SetUniqueList(new ArrayList(), new HashSet());
-      final Integer existingElement = new Integer(1);
-      list.add(existingElement);
-
-      // add two new unique elements at index 0
-      final Integer firstNewElement = new Integer(2);
-      final Integer secondNewElement = new Integer(3);
-      collection = Arrays.asList(new Integer[] {firstNewElement, secondNewElement});
-      list.addAll(0, collection);
-      assertEquals("Unique elements should be added.", 3, list.size());
-      assertEquals("First new element should be at index 0", firstNewElement, list.get(0));
-      assertEquals("Second new element should be at index 1", secondNewElement, list.get(1));
-      assertEquals("Existing element should shift to index 2", existingElement, list.get(2));
-
-      // add a duplicate element and a unique element at index 0
-      final Integer thirdNewElement = new Integer(4);
-      collection = Arrays.asList(new Integer[] {existingElement, thirdNewElement});
-      list.addAll(0, collection);
-      assertEquals("Duplicate element should not be added, unique element should be added.",
-        4, list.size());
-      assertEquals("Third new element should be at index 0", thirdNewElement, list.get(0));
-    }
     
     public void testListSetByIndex() {
         // override for set behaviour

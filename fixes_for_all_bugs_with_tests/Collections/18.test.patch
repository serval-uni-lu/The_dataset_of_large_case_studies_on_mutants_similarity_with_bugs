diff --git a/src/test/java/org/apache/commons/collections/set/ListOrderedSetTest.java b/src/test/java/org/apache/commons/collections/set/ListOrderedSetTest.java
index 408598d7..2ef43a3b 100644
--- a/src/test/java/org/apache/commons/collections/set/ListOrderedSetTest.java
+++ b/src/test/java/org/apache/commons/collections/set/ListOrderedSetTest.java
@@ -17,28 +17,23 @@
 package org.apache.commons.collections.set;
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
 /**
- * Extension of {@link AbstractSetTest} for exercising the
- * {@link ListOrderedSet} implementation.
- * 
+ * Extension of {@link AbstractSetTest} for exercising the {@link ListOrderedSet}
+ * implementation.
+ *
  * @since 3.0
  * @version $Id$
  */
-public class ListOrderedSetTest<E>
-    extends AbstractSetTest<E> {
+public class ListOrderedSetTest<E> extends AbstractSetTest<E> {
 
     private static final Integer ZERO = new Integer(0);
-
     private static final Integer ONE = new Integer(1);
-
     private static final Integer TWO = new Integer(2);
-
     private static final Integer THREE = new Integer(3);
 
     public ListOrderedSetTest(String testName) {
@@ -70,14 +65,12 @@ public class ListOrderedSetTest<E>
         }
 
         for (int i = 0; i < 10; i += 2) {
-            assertTrue("Must be able to remove int",
-                       set.remove(Integer.toString(i)));
+            assertTrue("Must be able to remove int", set.remove(Integer.toString(i)));
         }
 
         it = set.iterator();
         for (int i = 1; i < 10; i += 2) {
-            assertEquals("Sequence is wrong after remove ",
-                         Integer.toString(i), it.next());
+            assertEquals("Sequence is wrong after remove ", Integer.toString(i), it.next());
         }
 
         for (int i = 0; i < 10; i++) {
@@ -154,7 +147,7 @@ public class ListOrderedSetTest<E>
         assertSame(TWO, set.get(2));
 
         list.add(0, (E) THREE); // list = [3,0,2]
-        set.remove(TWO); //  set = [0,1]
+        set.remove(TWO);    //  set = [0,1]
         set.addAll(1, list);
         assertEquals(4, set.size());
         assertSame(ZERO, set.get(0));
@@ -170,7 +163,7 @@ public class ListOrderedSetTest<E>
         B b = new B();
         set.add((E) a);
         assertEquals(1, set.size());
-        set.add((E) b); // will match but not replace A as equal
+        set.add((E) b);  // will match but not replace A as equal
         assertEquals(1, set.size());
         assertSame(a, set.decorated().iterator().next());
         assertSame(a, set.iterator().next());
@@ -178,61 +171,11 @@ public class ListOrderedSetTest<E>
         assertSame(a, set.asList().get(0));
     }
 
-    @SuppressWarnings("unchecked")
-    public void testRetainAll() {
-        List<E> list = new ArrayList<E>(10);
-        Set<E> set = new HashSet<E>(10);
-        ListOrderedSet<E> orderedSet = ListOrderedSet.listOrderedSet(set, list);
-        for (int i = 0; i < 10; ++i) {
-            orderedSet.add((E) Integer.valueOf(10 - i - 1));
-        }
-
-        Collection<E> retained = new ArrayList<E>(5);
-        for (int i = 0; i < 5; ++i) {
-            retained.add((E) Integer.valueOf(i * 2));
-        }
-
-        assertTrue(orderedSet.retainAll(retained));
-        assertEquals(5, orderedSet.size());
-        // insertion order preserved?
-        assertEquals(Integer.valueOf(8), orderedSet.get(0));
-        assertEquals(Integer.valueOf(6), orderedSet.get(1));
-        assertEquals(Integer.valueOf(4), orderedSet.get(2));
-        assertEquals(Integer.valueOf(2), orderedSet.get(3));
-        assertEquals(Integer.valueOf(0), orderedSet.get(4));
-    }
-
-    /*
-     * test case for https://issues.apache.org/jira/browse/COLLECTIONS-426
-     */
-    public void testRetainAllCollections426() {
-        int size = 100000;
-        ListOrderedSet<Integer> set = new ListOrderedSet<Integer>();
-        for (int i = 0; i < size; i++) {
-            set.add(i);
-        }
-        ArrayList<Integer> list = new ArrayList<Integer>();
-        for (int i = size; i < 2 * size; i++) {
-            list.add(i);
-        }
-
-        long start = System.currentTimeMillis();
-        set.retainAll(list);
-        long stop = System.currentTimeMillis();
-
-        // make sure retainAll completes under 5 seconds
-        // TODO if test is migrated to JUnit 4, add a Timeout rule.
-        // http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/Timeout.html
-        assertTrue((stop - start) < 5000);
-    }
-
     static class A {
-
         @Override
         public boolean equals(Object obj) {
             return (obj instanceof A || obj instanceof B);
         }
-
         @Override
         public int hashCode() {
             return 1;
@@ -240,12 +183,10 @@ public class ListOrderedSetTest<E>
     }
 
     static class B {
-
         @Override
         public boolean equals(Object obj) {
             return (obj instanceof A || obj instanceof B);
         }
-
         @Override
         public int hashCode() {
             return 1;
@@ -256,28 +197,23 @@ public class ListOrderedSetTest<E>
         try {
             ListOrderedSet.listOrderedSet((List<E>) null);
             fail();
-        } catch (IllegalArgumentException ex) {
-        }
+        } catch (IllegalArgumentException ex) {}
         try {
             ListOrderedSet.listOrderedSet((Set<E>) null);
             fail();
-        } catch (IllegalArgumentException ex) {
-        }
+        } catch (IllegalArgumentException ex) {}
         try {
             ListOrderedSet.listOrderedSet(null, null);
             fail();
-        } catch (IllegalArgumentException ex) {
-        }
+        } catch (IllegalArgumentException ex) {}
         try {
             ListOrderedSet.listOrderedSet(new HashSet<E>(), null);
             fail();
-        } catch (IllegalArgumentException ex) {
-        }
+        } catch (IllegalArgumentException ex) {}
         try {
             ListOrderedSet.listOrderedSet(null, new ArrayList<E>());
             fail();
-        } catch (IllegalArgumentException ex) {
-        }
+        } catch (IllegalArgumentException ex) {}
     }
 
     @Override
@@ -285,11 +221,11 @@ public class ListOrderedSetTest<E>
         return "3.1";
     }
 
-    //    public void testCreate() throws Exception {
-    //        resetEmpty();
-    //        writeExternalFormToDisk((java.io.Serializable) collection, "D:/dev/collections/data/test/ListOrderedSet.emptyCollection.version3.1.obj");
-    //        resetFull();
-    //        writeExternalFormToDisk((java.io.Serializable) collection, "D:/dev/collections/data/test/ListOrderedSet.fullCollection.version3.1.obj");
-    //    }
+//    public void testCreate() throws Exception {
+//        resetEmpty();
+//        writeExternalFormToDisk((java.io.Serializable) collection, "D:/dev/collections/data/test/ListOrderedSet.emptyCollection.version3.1.obj");
+//        resetFull();
+//        writeExternalFormToDisk((java.io.Serializable) collection, "D:/dev/collections/data/test/ListOrderedSet.fullCollection.version3.1.obj");
+//    }
 
 }

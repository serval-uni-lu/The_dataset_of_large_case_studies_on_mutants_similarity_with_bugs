diff --git a/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java b/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java
index a99e814f..759167ec 100644
--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java
@@ -190,7 +190,6 @@ public class BasicGeneratorFilteringTest extends BaseTest
         gen.close();
 
         assertEquals(aposToQuotes("{'ob':{'value':['x']}}"), w.toString());
-        assertEquals(1, gen.getMatchCount());
     }
 
     public void testSingleMatchFilteringWithPathRawBinary() throws Exception
@@ -241,51 +240,47 @@ public class BasicGeneratorFilteringTest extends BaseTest
         gen.close();
 
         assertEquals(aposToQuotes("{'array':['AQ==',1,2,3,4 ,5.0 /*x*/,6.25,7.5]}"), w.toString());
-        assertEquals(1, gen.getMatchCount());
     }
     
     public void testMultipleMatchFilteringWithPath1() throws Exception
     {
         StringWriter w = new StringWriter();
-        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
                 new NameMatchFilter("value0", "value2"),
                 true, /* includePath */ true /* multipleMatches */ );
         final String JSON = "{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}";
         writeJsonDoc(JSON_F, JSON, gen);
         assertEquals(aposToQuotes("{'ob':{'value0':2,'value2':4}}"), w.toString());
-        assertEquals(2, gen.getMatchCount());
     }
 
     public void testMultipleMatchFilteringWithPath2() throws Exception
     {
         StringWriter w = new StringWriter();
-
-        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
+        
+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
                 new NameMatchFilter("array", "b", "value"),
                 true, true);
         final String JSON = "{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}";
         writeJsonDoc(JSON_F, JSON, gen);
         assertEquals(aposToQuotes("{'array':[1,2],'ob':{'value':3},'b':true}"), w.toString());
-        assertEquals(3, gen.getMatchCount());
     }
 
     public void testMultipleMatchFilteringWithPath3() throws Exception
     {
         StringWriter w = new StringWriter();
-
-        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
+        
+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
                 new NameMatchFilter("value"),
                 true, true);
         final String JSON = "{'root':{'a0':true,'a':{'value':3},'b':{'value':4}},'b0':false}";
         writeJsonDoc(JSON_F, JSON, gen);
         assertEquals(aposToQuotes("{'root':{'a':{'value':3},'b':{'value':4}}}"), w.toString());
-        assertEquals(2, gen.getMatchCount());
     }
 
     public void testIndexMatchWithPath1() throws Exception
     {
         StringWriter w = new StringWriter();
-        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
                 new IndexMatchFilter(1),
                 true, true);
         final String JSON = "{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}";
@@ -298,26 +293,24 @@ public class BasicGeneratorFilteringTest extends BaseTest
                 true, true);
         writeJsonDoc(JSON_F, JSON, gen);
         assertEquals(aposToQuotes("{'array':[1]}"), w.toString());
-        assertEquals(1, gen.getMatchCount());
     }
 
     public void testIndexMatchWithPath2() throws Exception
     {
         StringWriter w = new StringWriter();
-        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
                 new IndexMatchFilter(0,1),
                 true, true);
         final String JSON = "{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}";
         writeJsonDoc(JSON_F, JSON, gen);
         assertEquals(aposToQuotes("{'array':[1,2]}"), w.toString());
-        assertEquals(2, gen.getMatchCount());
     }
 
     public void testWriteStartObjectWithObject() throws Exception
     {
         StringWriter w = new StringWriter();
 
-        FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),
                 TokenFilter.INCLUDE_ALL,
                 true, true);
 
diff --git a/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java b/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java
index 290fb04e..987d89c8 100644
--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java
@@ -81,118 +81,52 @@ public class BasicParserFilteringTest extends BaseTest
     public void testSingleMatchFilteringWithoutPath() throws Exception
     {
         JsonParser p0 = JSON_F.createParser(SIMPLE);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
+        JsonParser p = new FilteringParserDelegate(p0,
                new NameMatchFilter("value"),
                    false, // includePath
                    false // multipleMatches
                 );
         String result = readAndWrite(JSON_F, p);
         assertEquals(aposToQuotes("3"), result);
-        assertEquals(1, p.getMatchCount());
-    }
-
-    public void testSingleMatchFilteringWithPath() throws Exception
-    {
-        String jsonString = aposToQuotes("{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}");
-        JsonParser p0 = JSON_F.createParser(jsonString);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
-                new NameMatchFilter("a"),
-                true, // includePath
-                false // multipleMatches
-        );
-        String result = readAndWrite(JSON_F, p);
-        assertEquals(aposToQuotes("{'a':123}"), result);
-        assertEquals(1, p.getMatchCount());
     }
 
     @SuppressWarnings("resource")
-    public void testNotAllowMultipleMatchesWithoutPath1() throws Exception
+    public void testNotAllowMultipleMatches() throws Exception
     {
-        String jsonString = aposToQuotes("{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'b':true}");
+    	String jsonString = aposToQuotes("{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}");
         JsonParser p0 = JSON_F.createParser(jsonString);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
+        JsonParser p = new FilteringParserDelegate(p0,
                new NameMatchFilter("value"),
                    false, // includePath
                    false // multipleMatches -false
                 );
         String result = readAndWrite(JSON_F, p);
         assertEquals(aposToQuotes("3"), result);
-        assertEquals(1, p.getMatchCount());
-    }
-
-    @SuppressWarnings("resource")
-    public void testNotAllowMultipleMatchesWithoutPath2() throws Exception
-    {
-        String jsonString = aposToQuotes("{'a':123,'array':[1,2],'array':[3,4],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\"val\",'b':true}");
-        JsonParser p0 = JSON_F.createParser(jsonString);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
-                new IndexMatchFilter(1),
-                false, // includePath
-                false // multipleMatches -false
-        );
-        String result = readAndWrite(JSON_F, p);
-        assertEquals(aposToQuotes("2"), result);
-        assertEquals(1, p.getMatchCount());
     }
-
+    
     @SuppressWarnings("resource")
-    public void testAllowMultipleMatchesWithoutPath() throws Exception
+    public void testAllowMultipleMatches() throws Exception
     {
-        String jsonString = aposToQuotes("{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\"val\",'b':true}");
+    	String jsonString = aposToQuotes("{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}");
         JsonParser p0 = JSON_F.createParser(jsonString);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
+        JsonParser p = new FilteringParserDelegate(p0,
                new NameMatchFilter("value"),
                    false, // includePath
                    true // multipleMatches - true
                 );
         String result = readAndWrite(JSON_F, p);
-        assertEquals(aposToQuotes("3 {\"value0\":2} \"val\""), result);
-        assertEquals(3, p.getMatchCount());
-    }
-
-
-    @SuppressWarnings("resource")
-    public void testAllowMultipleMatchesWithPath1() throws Exception
-    {
-        String jsonString = aposToQuotes("{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\"val\",'b':true}");
-        JsonParser p0 = JSON_F.createParser(jsonString);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
-                new NameMatchFilter("value"),
-                true, // includePath
-                true // multipleMatches - true
-        );
-        String result = readAndWrite(JSON_F, p);
-        assertEquals(aposToQuotes("{\"ob\":{\"value\":3,\"value\":{\"value0\":2}},\"value\":\"val\"}"), result);
-        assertEquals(3, p.getMatchCount());
-    }
-
-
-    @SuppressWarnings("resource")
-    public void testAllowMultipleMatchesWithPath2() throws Exception
-    {
-        String jsonString = aposToQuotes("{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'array':[3,4],'value':{'value0':2}},'value':\"val\",'b':true}");
-        JsonParser p0 = JSON_F.createParser(jsonString);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
-                new IndexMatchFilter(1),
-                true, // includePath
-                true // multipleMatches - true
-        );
-        String result = readAndWrite(JSON_F, p);
-        assertEquals(aposToQuotes("{\"array\":[2],\"ob\":{\"array\":[4]}}"), result);
-        assertEquals(2, p.getMatchCount());
+        assertEquals(aposToQuotes("3 4"), result);
     }
 
     @SuppressWarnings("resource")
     public void testMultipleMatchFilteringWithPath1() throws Exception
     {
         JsonParser p0 = JSON_F.createParser(SIMPLE);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
+        JsonParser p = new FilteringParserDelegate(p0,
                 new NameMatchFilter("value0", "value2"),
                 true, /* includePath */ true /* multipleMatches */ );
         String result = readAndWrite(JSON_F, p);
         assertEquals(aposToQuotes("{'ob':{'value0':2,'value2':4}}"), result);
-        assertEquals(2, p.getMatchCount());
-
     }
 
     @SuppressWarnings("resource")
@@ -200,57 +134,51 @@ public class BasicParserFilteringTest extends BaseTest
     {
         String INPUT = aposToQuotes("{'a':123,'ob':{'value0':2,'value':3,'value2':4},'b':true}");
         JsonParser p0 = JSON_F.createParser(INPUT);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
+        JsonParser p = new FilteringParserDelegate(p0,
                 new NameMatchFilter("b", "value"),
                 true, true);
 
         String result = readAndWrite(JSON_F, p);
         assertEquals(aposToQuotes("{'ob':{'value':3},'b':true}"), result);
-        assertEquals(2, p.getMatchCount());
     }
 
     @SuppressWarnings("resource")
     public void testMultipleMatchFilteringWithPath3() throws Exception
     {
-        final String JSON = aposToQuotes("{'root':{'a0':true,'a':{'value':3},'b':{'value':\"foo\"}},'b0':false}");
+        final String JSON = aposToQuotes("{'root':{'a0':true,'a':{'value':3},'b':{'value':4}},'b0':false}");
         JsonParser p0 = JSON_F.createParser(JSON);
-        FilteringParserDelegate p = new FilteringParserDelegate(p0,
+        JsonParser p = new FilteringParserDelegate(p0,
                 new NameMatchFilter("value"),
                 true, true);
         String result = readAndWrite(JSON_F, p);
-        assertEquals(aposToQuotes("{'root':{'a':{'value':3},'b':{'value':\"foo\"}}}"), result);
-        assertEquals(2, p.getMatchCount());
+        assertEquals(aposToQuotes("{'root':{'a':{'value':3},'b':{'value':4}}}"), result);
     }
 
     @SuppressWarnings("resource")
     public void testIndexMatchWithPath1() throws Exception
     {
-        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),
+        JsonParser p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),
                 new IndexMatchFilter(1), true, true);
         String result = readAndWrite(JSON_F, p);
         assertEquals(aposToQuotes("{'array':[2]}"), result);
-        assertEquals(1, p.getMatchCount());
 
         p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),
                 new IndexMatchFilter(0), true, true);
         result = readAndWrite(JSON_F, p);
         assertEquals(aposToQuotes("{'array':[1]}"), result);
-        assertEquals(1, p.getMatchCount());
     }
 
     @SuppressWarnings("resource")
     public void testIndexMatchWithPath2() throws Exception
     {
-        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),
+        JsonParser p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),
                 new IndexMatchFilter(0, 1), true, true);
         assertEquals(aposToQuotes("{'array':[1,2]}"), readAndWrite(JSON_F, p));
-        assertEquals(2, p.getMatchCount());
     
         String JSON = aposToQuotes("{'a':123,'array':[1,2,3,4,5],'b':[1,2,3]}");
         p = new FilteringParserDelegate(JSON_F.createParser(JSON),
                 new IndexMatchFilter(1, 3), true, true);
         assertEquals(aposToQuotes("{'array':[2,4],'b':[2]}"), readAndWrite(JSON_F, p));
-        assertEquals(3, p.getMatchCount());
     }
 
     @SuppressWarnings("resource")

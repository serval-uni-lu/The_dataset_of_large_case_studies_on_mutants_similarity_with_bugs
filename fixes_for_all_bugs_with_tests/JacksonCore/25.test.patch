diff --git a/src/test/java/com/fasterxml/jackson/core/read/NonStandardUnquotedNamesTest.java b/src/test/java/com/fasterxml/jackson/core/read/NonStandardUnquotedNamesTest.java
index 1aa75fff..d88d5885 100644
--- a/src/test/java/com/fasterxml/jackson/core/read/NonStandardUnquotedNamesTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/read/NonStandardUnquotedNamesTest.java
@@ -1,18 +1,12 @@
 package com.fasterxml.jackson.core.read;
 
 import com.fasterxml.jackson.core.JsonFactory;
-import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.core.JsonToken;
 
 public class NonStandardUnquotedNamesTest
     extends com.fasterxml.jackson.core.BaseTest
 {
-    private final JsonFactory UNQUOTED_FIELDS_F = new JsonFactory();
-    {
-        UNQUOTED_FIELDS_F.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
-    }
-
     public void testSimpleUnquotedBytes() throws Exception {
         _testSimpleUnquoted(MODE_INPUT_STREAM);
         _testSimpleUnquoted(MODE_INPUT_STREAM_THROTTLED);
@@ -22,7 +16,7 @@ public class NonStandardUnquotedNamesTest
     public void testSimpleUnquotedChars() throws Exception {
         _testSimpleUnquoted(MODE_READER);
     }
-
+    
     public void testLargeUnquoted() throws Exception
     {
         _testLargeUnquoted(MODE_INPUT_STREAM);
@@ -31,35 +25,12 @@ public class NonStandardUnquotedNamesTest
         _testLargeUnquoted(MODE_READER);
     }
 
-    // [core#510]: ArrayIndexOutOfBounds
-    public void testUnquotedIssue510() throws Exception
-    {
-        // NOTE! Requires longer input buffer to trigger longer codepath
-        char[] fullChars = new char[4001];
-        for (int i = 0; i < 3998; i++) {
-             fullChars[i] = ' ';
-        }
-        fullChars[3998] = '{';
-        fullChars[3999] = 'a';
-        fullChars[4000] = 256;
-
-        JsonParser p = UNQUOTED_FIELDS_F.createParser(new java.io.StringReader(new String(fullChars)));
-        assertToken(JsonToken.START_OBJECT, p.nextToken());
-        try {
-            p.nextToken();
-            fail("Should not pass");
-        } catch (JsonParseException e) {
-            ; // should fail here
-        }
-        p.close();
-    }
-
     /*
     /****************************************************************
     /* Secondary test methods
     /****************************************************************
      */
-    
+
     private void _testLargeUnquoted(int mode) throws Exception
     {
         StringBuilder sb = new StringBuilder(5000);
@@ -80,7 +51,9 @@ public class NonStandardUnquotedNamesTest
         }
         sb.append("]");
         String JSON = sb.toString();
-        JsonParser p = createParser(UNQUOTED_FIELDS_F, mode, JSON);
+        JsonFactory f = new JsonFactory();
+        f.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
+        JsonParser p = createParser(f, mode, JSON);
         assertToken(JsonToken.START_ARRAY, p.nextToken());
         for (int i = 0; i < REPS; ++i) {
             assertToken(JsonToken.START_OBJECT, p.nextToken());
@@ -95,8 +68,11 @@ public class NonStandardUnquotedNamesTest
 
     private void _testSimpleUnquoted(int mode) throws Exception
     {
+        final JsonFactory f = new JsonFactory();
+        f.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
+
         String JSON = "{ a : 1, _foo:true, $:\"money!\", \" \":null }";
-        JsonParser p = createParser(UNQUOTED_FIELDS_F, mode, JSON);
+        JsonParser p = createParser(f, mode, JSON);
 
         assertToken(JsonToken.START_OBJECT, p.nextToken());
         assertToken(JsonToken.FIELD_NAME, p.nextToken());
@@ -122,7 +98,7 @@ public class NonStandardUnquotedNamesTest
         // Another thing, as per [Issue#102]: numbers
 
         JSON = "{ 123:true,4:false }";
-        p = createParser(UNQUOTED_FIELDS_F, mode, JSON);
+        p = createParser(f, mode, JSON);
 
         assertToken(JsonToken.START_OBJECT, p.nextToken());
         assertToken(JsonToken.FIELD_NAME, p.nextToken());

diff --git a/src/test/java/com/fasterxml/jackson/core/base64/Base64GenerationTest.java b/src/test/java/com/fasterxml/jackson/core/base64/Base64GenerationTest.java
deleted file mode 100644
index f3b064f5..00000000
--- a/src/test/java/com/fasterxml/jackson/core/base64/Base64GenerationTest.java
+++ /dev/null
@@ -1,207 +0,0 @@
-package com.fasterxml.jackson.core.base64;
-
-import java.io.*;
-
-import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.testsupport.ThrottledInputStream;
-
-public class Base64GenerationTest
-    extends com.fasterxml.jackson.core.BaseTest
-{
-    /* The usual sample input string, from Thomas Hobbes's "Leviathan"
-     * (via Wikipedia)
-     */
-    private final static String WIKIPEDIA_BASE64_TEXT = "Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.";
-    private final static byte[] WIKIPEDIA_BASE64_AS_BYTES;
-    static {
-        try {
-            WIKIPEDIA_BASE64_AS_BYTES = WIKIPEDIA_BASE64_TEXT.getBytes("US-ASCII");
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    private final String WIKIPEDIA_BASE64_ENCODED =
-"TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz"
-+"IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg"
-+"dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu"
-+"dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo"
-+"ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4="
-        ;
-
-    
-    private final static Base64Variant[] VARIANTS = {
-            Base64Variants.MIME,
-            Base64Variants.MIME_NO_LINEFEEDS,
-            Base64Variants.MODIFIED_FOR_URL,
-            Base64Variants.PEM
-    };
-
-    /*
-    /**********************************************************
-    /* Test methods
-    /**********************************************************
-     */
-
-    private final JsonFactory JSON_F = new JsonFactory();
-    
-    public void testStreamingBinaryWrites() throws Exception
-    {
-        _testStreamingWrites(JSON_F, true);
-        _testStreamingWrites(JSON_F, false);
-    }
-
-    // For [core#55]
-    public void testIssue55() throws Exception
-    {
-        final JsonFactory f = new JsonFactory();
-
-        // First,  byte-backed:
-        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
-
-        JsonGenerator gen = f.createGenerator(bytes);
-        ByteArrayInputStream data = new ByteArrayInputStream(new byte[2000]);
-        gen.writeBinary(data, 1999);       
-        gen.close();
-
-        final int EXP_LEN = 2670;
-        
-        assertEquals(EXP_LEN, bytes.size());
-
-        // Then char-backed
-        StringWriter sw = new StringWriter();
-        
-        gen = f.createGenerator(sw);
-        data = new ByteArrayInputStream(new byte[2000]);
-        gen.writeBinary(data, 1999);       
-        gen.close();
-        
-        assertEquals(EXP_LEN, sw.toString().length());
-    }
-
-    /**
-     * This is really inadequate test, all in all, but should serve
-     * as some kind of sanity check. Reader-side should more thoroughly
-     * test things, as it does need writers to construct the data first.
-     */
-    public void testSimpleBinaryWrite() throws Exception
-    {
-        _testSimpleBinaryWrite(false);
-        _testSimpleBinaryWrite(true);
-    }
-
-    // for [core#318]
-    public void testBinaryAsEmbeddedObject() throws Exception
-    {
-        JsonGenerator g;
-
-        StringWriter sw = new StringWriter();
-        g = JSON_F.createGenerator(sw);
-        g.writeEmbeddedObject(WIKIPEDIA_BASE64_AS_BYTES);
-        g.close();
-        assertEquals(quote(WIKIPEDIA_BASE64_ENCODED), sw.toString());
-
-        ByteArrayOutputStream bytes =  new ByteArrayOutputStream(100);
-        g = JSON_F.createGenerator(bytes);
-        g.writeEmbeddedObject(WIKIPEDIA_BASE64_AS_BYTES);
-        g.close();
-        assertEquals(quote(WIKIPEDIA_BASE64_ENCODED), bytes.toString("UTF-8"));
-    }
-
-    /*
-    /**********************************************************
-    /* Helper methods
-    /**********************************************************
-     */
-    
-    private void _testSimpleBinaryWrite(boolean useCharBased) throws Exception
-    {
-        /* Let's only test the standard base64 variant; but write
-         * values in root, array and object contexts.
-         */
-        Base64Variant b64v = Base64Variants.getDefaultVariant();
-        JsonFactory jf = new JsonFactory();
-
-        for (int i = 0; i < 3; ++i) {
-            JsonGenerator gen;
-            ByteArrayOutputStream bout = new ByteArrayOutputStream(200);
-            if (useCharBased) {
-                gen = jf.createGenerator(new OutputStreamWriter(bout, "UTF-8"));
-            } else {
-                gen = jf.createGenerator(bout, JsonEncoding.UTF8);
-            }
-
-            switch (i) {
-            case 0: // root
-                gen.writeBinary(b64v, WIKIPEDIA_BASE64_AS_BYTES, 0, WIKIPEDIA_BASE64_AS_BYTES.length);
-                break;
-            case 1: // array
-                gen.writeStartArray();
-                gen.writeBinary(b64v, WIKIPEDIA_BASE64_AS_BYTES, 0, WIKIPEDIA_BASE64_AS_BYTES.length);
-                gen.writeEndArray();
-                break;
-            default: // object
-                gen.writeStartObject();
-                gen.writeFieldName("field");
-                gen.writeBinary(b64v, WIKIPEDIA_BASE64_AS_BYTES, 0, WIKIPEDIA_BASE64_AS_BYTES.length);
-                gen.writeEndObject();
-                break;
-            }
-            gen.close();
-
-            JsonParser jp = jf.createParser(new ByteArrayInputStream(bout.toByteArray()));
-            
-            // Need to skip other events before binary data:
-            switch (i) {
-            case 0:
-                break;
-            case 1:
-                assertEquals(JsonToken.START_ARRAY, jp.nextToken());
-                break;
-            default:
-                assertEquals(JsonToken.START_OBJECT, jp.nextToken());
-                assertEquals(JsonToken.FIELD_NAME, jp.nextToken());
-                break;
-            }
-            assertEquals(JsonToken.VALUE_STRING, jp.nextToken());
-            String actualValue = jp.getText();
-            jp.close();
-            assertEquals(WIKIPEDIA_BASE64_ENCODED, actualValue);
-        }
-    }
-
-    private final static String TEXT = "Some content so that we can test encoding of base64 data; must"
-            +" be long enough include a line wrap or two...";
-    private final static String TEXT4 = TEXT + TEXT + TEXT + TEXT;
-
-    @SuppressWarnings("resource")
-    private void _testStreamingWrites(JsonFactory jf, boolean useBytes) throws Exception
-    {
-        final byte[] INPUT = TEXT4.getBytes("UTF-8");
-        for (Base64Variant variant : VARIANTS) {
-            final String EXP_OUTPUT = "[" + quote(variant.encode(INPUT))+"]";
-            for (boolean passLength : new boolean[] { true, false }) {
-                for (int chunkSize : new int[] { 1, 2, 3, 4, 7, 11, 29, 5000 }) {
-//System.err.println(""+variant+", length "+passLength+", chunk "+chunkSize);
-                    
-                    JsonGenerator jgen;
-                    
-                    final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
-                    if (useBytes) {
-                        jgen = jf.createGenerator(bytes);
-                    } else {
-                        jgen = jf.createGenerator(new OutputStreamWriter(bytes, "UTF-8"));
-                    }
-                    jgen.writeStartArray();
-                    int length = passLength ? INPUT.length : -1;
-                    InputStream data = new ThrottledInputStream(INPUT, chunkSize);
-                    jgen.writeBinary(variant, data, length);
-                    jgen.writeEndArray();
-                    jgen.close();
-                    String JSON = bytes.toString("UTF-8");
-                    assertEquals(EXP_OUTPUT, JSON);
-                }
-            }
-        }
-    }
-}
diff --git a/src/test/java/com/fasterxml/jackson/core/base64/TestBase64Generation.java b/src/test/java/com/fasterxml/jackson/core/base64/TestBase64Generation.java
new file mode 100644
index 00000000..ef3c6733
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/core/base64/TestBase64Generation.java
@@ -0,0 +1,101 @@
+package com.fasterxml.jackson.core.base64;
+
+import java.io.*;
+
+import com.fasterxml.jackson.core.*;
+import com.fasterxml.jackson.core.testsupport.ThrottledInputStream;
+
+public class TestBase64Generation
+    extends com.fasterxml.jackson.core.BaseTest
+{
+    
+
+    /*
+    /**********************************************************
+    /* Test methods
+    /**********************************************************
+     */
+
+    public void testStreamingWrites() throws Exception
+    {
+        final JsonFactory f = new JsonFactory();
+        _testStreamingWrites(f, true);
+        _testStreamingWrites(f, false);
+    }
+
+    // For [#55]
+    public void testIssue55() throws Exception
+    {
+        final JsonFactory f = new JsonFactory();
+
+        // First,  byte-backed:
+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
+
+        JsonGenerator gen = f.createGenerator(bytes);
+        ByteArrayInputStream data = new ByteArrayInputStream(new byte[2000]);
+        gen.writeBinary(data, 1999);       
+        gen.close();
+
+        final int EXP_LEN = 2670;
+        
+        assertEquals(EXP_LEN, bytes.size());
+
+        // Then char-backed
+        StringWriter sw = new StringWriter();
+        
+        gen = f.createGenerator(sw);
+        data = new ByteArrayInputStream(new byte[2000]);
+        gen.writeBinary(data, 1999);       
+        gen.close();
+        
+        assertEquals(EXP_LEN, sw.toString().length());
+    }
+    
+    /*
+    /**********************************************************
+    /* Helper methods
+    /**********************************************************
+     */
+
+    private final static Base64Variant[] VARIANTS = {
+            Base64Variants.MIME,
+            Base64Variants.MIME_NO_LINEFEEDS,
+            Base64Variants.MODIFIED_FOR_URL,
+            Base64Variants.PEM
+    };
+
+    private final static String TEXT = "Some content so that we can test encoding of base64 data; must"
+            +" be long enough include a line wrap or two...";
+    private final static String TEXT4 = TEXT + TEXT + TEXT + TEXT;
+
+    @SuppressWarnings("resource")
+    private void _testStreamingWrites(JsonFactory jf, boolean useBytes) throws Exception
+    {
+        final byte[] INPUT = TEXT4.getBytes("UTF-8");
+        for (Base64Variant variant : VARIANTS) {
+            final String EXP_OUTPUT = "[" + quote(variant.encode(INPUT))+"]";
+            for (boolean passLength : new boolean[] { true, false }) {
+                for (int chunkSize : new int[] { 1, 2, 3, 4, 7, 11, 29, 5000 }) {
+//System.err.println(""+variant+", length "+passLength+", chunk "+chunkSize);
+                    
+                    JsonGenerator jgen;
+                    
+                    final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
+                    if (useBytes) {
+                        jgen = jf.createGenerator(bytes);
+                    } else {
+                        jgen = jf.createGenerator(new OutputStreamWriter(bytes, "UTF-8"));
+                    }
+                    jgen.writeStartArray();
+                    int length = passLength ? INPUT.length : -1;
+                    InputStream data = new ThrottledInputStream(INPUT, chunkSize);
+                    jgen.writeBinary(variant, data, length);
+                    jgen.writeEndArray();
+                    jgen.close();
+                    String JSON = bytes.toString("UTF-8");
+                    assertEquals(EXP_OUTPUT, JSON);
+                }
+            }
+        }
+    }
+}
diff --git a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java
index 84475242..ded23807 100644
--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java
+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java
@@ -15,8 +15,6 @@ import com.fasterxml.jackson.core.*;
 public class TestGeneratorMisc
     extends com.fasterxml.jackson.core.BaseTest
 {
-    private final JsonFactory JSON_F = new JsonFactory();
-
     /*
     /**********************************************************
     /* Tests for closing, status
@@ -25,11 +23,12 @@ public class TestGeneratorMisc
 
     public void testIsClosed() throws IOException
     {
+        JsonFactory jf = new JsonFactory();
         for (int i = 0; i < 2; ++i) {
             boolean stream = ((i & 1) == 0);
             JsonGenerator jg = stream ?
-                    JSON_F.createGenerator(new StringWriter())
-                : JSON_F.createGenerator(new ByteArrayOutputStream(), JsonEncoding.UTF8)
+                jf.createGenerator(new StringWriter())
+                : jf.createGenerator(new ByteArrayOutputStream(), JsonEncoding.UTF8)
                 ;
             assertFalse(jg.isClosed());
             jg.writeStartArray();
@@ -47,8 +46,9 @@ public class TestGeneratorMisc
     public void testSimpleWriteObject() throws IOException
     {
         // note: NOT mapping factory, for this test
+        JsonFactory jf = new JsonFactory();
         StringWriter sw = new StringWriter();
-        JsonGenerator gen = JSON_F.createGenerator(sw);
+        JsonGenerator gen = jf.createGenerator(sw);
         gen.writeStartArray();
 
         // simple wrappers first
@@ -65,7 +65,7 @@ public class TestGeneratorMisc
         
         // then other basic types
         sw = new StringWriter();
-        gen = JSON_F.createGenerator(sw);
+        gen = jf.createGenerator(sw);
         gen.writeStartArray();
         gen.writeObject(BigInteger.valueOf(1234));
         gen.writeObject(new BigDecimal(0.5));
@@ -76,7 +76,7 @@ public class TestGeneratorMisc
 
         // then Atomic types
         sw = new StringWriter();
-        gen = JSON_F.createGenerator(sw);
+        gen = jf.createGenerator(sw);
         gen.writeStartArray();
         gen.writeObject(new AtomicBoolean(false));
         gen.writeObject(new AtomicInteger(13));
@@ -95,8 +95,9 @@ public class TestGeneratorMisc
 
     public void testRaw() throws IOException
     {
+        JsonFactory jf = new JsonFactory();
         StringWriter sw = new StringWriter();
-        JsonGenerator gen = JSON_F.createGenerator(sw);
+        JsonGenerator gen = jf.createGenerator(sw);
         gen.writeStartArray();
         gen.writeRaw("-123, true");
         gen.writeRaw(", \"x\"  ");
@@ -117,8 +118,9 @@ public class TestGeneratorMisc
 
     public void testRawValue() throws IOException
     {
+        JsonFactory jf = new JsonFactory();
         StringWriter sw = new StringWriter();
-        JsonGenerator gen = JSON_F.createGenerator(sw);
+        JsonGenerator gen = jf.createGenerator(sw);
         gen.writeStartArray();
         gen.writeRawValue("7");
         gen.writeRawValue("[ null ]");
@@ -139,6 +141,93 @@ public class TestGeneratorMisc
         assertToken(JsonToken.END_ARRAY, jp.nextToken());
         jp.close();
     }
+    
+    /*
+    /**********************************************************
+    /* Tests for binary data
+    /**********************************************************
+     */
+
+    /**
+     * This is really inadequate test, all in all, but should serve
+     * as some kind of sanity check. Reader-side should more thoroughly
+     * test things, as it does need writers to construct the data first.
+     */
+    public void testBinaryWrite() throws Exception
+    {
+        _testBinaryWrite(false);
+        _testBinaryWrite(true);
+    }
+
+    private void _testBinaryWrite(boolean useCharBased) throws Exception
+    {
+        /* The usual sample input string, from Thomas Hobbes's "Leviathan"
+         * (via Wikipedia)
+         */
+        final String INPUT = "Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.";
+        final byte[] INPUT_BYTES = INPUT.getBytes("US-ASCII");
+        // as per MIME variant, result minus lfs =
+        final String OUTPUT =
+ "TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz"
++"IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg"
++"dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu"
++"dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo"
++"ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4="
+            ;
+
+        /* Let's only test the standard base64 variant; but write
+         * values in root, array and object contexts.
+         */
+        Base64Variant b64v = Base64Variants.getDefaultVariant();
+        JsonFactory jf = new JsonFactory();
+
+        for (int i = 0; i < 3; ++i) {
+            JsonGenerator gen;
+            ByteArrayOutputStream bout = new ByteArrayOutputStream(200);
+            if (useCharBased) {
+                gen = jf.createGenerator(new OutputStreamWriter(bout, "UTF-8"));
+            } else {
+                gen = jf.createGenerator(bout, JsonEncoding.UTF8);
+            }
+
+            switch (i) {
+            case 0: // root
+                gen.writeBinary(b64v, INPUT_BYTES, 0, INPUT_BYTES.length);
+                break;
+            case 1: // array
+                gen.writeStartArray();
+                gen.writeBinary(b64v, INPUT_BYTES, 0, INPUT_BYTES.length);
+                gen.writeEndArray();
+                break;
+            default: // object
+                gen.writeStartObject();
+                gen.writeFieldName("field");
+                gen.writeBinary(b64v, INPUT_BYTES, 0, INPUT_BYTES.length);
+                gen.writeEndObject();
+                break;
+            }
+            gen.close();
+
+            JsonParser jp = jf.createParser(new ByteArrayInputStream(bout.toByteArray()));
+            
+            // Need to skip other events before binary data:
+            switch (i) {
+            case 0:
+                break;
+            case 1:
+                assertEquals(JsonToken.START_ARRAY, jp.nextToken());
+                break;
+            default:
+                assertEquals(JsonToken.START_OBJECT, jp.nextToken());
+                assertEquals(JsonToken.FIELD_NAME, jp.nextToken());
+                break;
+            }
+            assertEquals(JsonToken.VALUE_STRING, jp.nextToken());
+            String actualValue = jp.getText();
+            jp.close();
+            assertEquals(OUTPUT, actualValue);
+        }
+    }
 
     /*
     /**********************************************************
@@ -151,9 +240,10 @@ public class TestGeneratorMisc
      */
     public void testLongerObjects() throws Exception
     {
-        _testLongerObjects(JSON_F, 0);
-        _testLongerObjects(JSON_F, 1);
-        _testLongerObjects(JSON_F, 2);
+        final JsonFactory jf = new JsonFactory();
+        _testLongerObjects(jf, 0);
+        _testLongerObjects(jf, 1);
+        _testLongerObjects(jf, 2);
     }
 
     public void _testLongerObjects(JsonFactory jf, int mode) throws Exception
@@ -226,40 +316,4 @@ public class TestGeneratorMisc
         assertToken(JsonToken.END_OBJECT, jp.nextToken());
         jp.close();
     }
-
-    /*
-    /**********************************************************
-    /* Tests, other
-    /**********************************************************
-     */
-
-    // NOTE: test for binary data under `base64/` tests
-    public void testAsEmbedded() throws Exception
-    {
-        JsonGenerator g;
-
-        StringWriter sw = new StringWriter();
-        g = JSON_F.createGenerator(sw);
-        g.writeEmbeddedObject(null);
-        g.close();
-        assertEquals("null", sw.toString());
-
-        ByteArrayOutputStream bytes =  new ByteArrayOutputStream(100);
-        g = JSON_F.createGenerator(bytes);
-        g.writeEmbeddedObject(null);
-        g.close();
-        assertEquals("null", bytes.toString("UTF-8"));
-
-        // also, for fun, try illegal unknown thingy
-
-        try {
-            g = JSON_F.createGenerator(bytes);
-            // try writing a Class object
-            g.writeEmbeddedObject(getClass());
-            fail("Expected an exception");
-            g.close(); // never gets here
-        } catch (JsonGenerationException e) {
-            verifyException(e, "No native support for");
-        }
-    }
 }
diff --git a/src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java b/src/test/java/com/fasterxml/jackson/core/read/Base64BinaryParsingTest.java
similarity index 57%
rename from src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java
rename to src/test/java/com/fasterxml/jackson/core/read/Base64BinaryParsingTest.java
index 8693bb9f..fbd71267 100644
--- a/src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/read/Base64BinaryParsingTest.java
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.core.base64;
+package com.fasterxml.jackson.core.read;
 
 import static org.junit.Assert.assertArrayEquals;
 
@@ -29,26 +29,6 @@ public class Base64BinaryParsingTest
         _testStreaming(MODE_READER);
     }
 
-    public void testSimple() throws IOException
-    {
-        for (int mode : ALL_MODES) {
-            _testSimple(mode);
-        }
-    }
-
-    public void testInArray() throws IOException
-    {
-        for (int mode : ALL_MODES) {
-            _testInArray(mode);
-        }
-    }
-
-    public void testWithEscaped() throws IOException {
-        for (int mode : ALL_MODES) {
-            _testEscaped(mode);
-        }
-    }
-
     /*
     /**********************************************************
     /* Test helper methods
@@ -175,97 +155,4 @@ public class Base64BinaryParsingTest
             p.close();
         }
     }
-
-    private void _testSimple(int mode)
-        throws IOException
-    {
-        /* The usual sample input string, from Thomas Hobbes's "Leviathan"
-         * (via Wikipedia)
-         */
-        final String RESULT = "Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.";
-        final byte[] RESULT_BYTES = RESULT.getBytes("US-ASCII");
-
-        // And here's what should produce it...
-        final String INPUT_STR = 
- "TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz"
-+"IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg"
-+"dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu"
-+"dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo"
-+"ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4="
-            ;
-
-        final String DOC = "\""+INPUT_STR+"\"";
-        JsonParser p = createParser(mode, DOC);
-
-        assertToken(JsonToken.VALUE_STRING, p.nextToken());
-        byte[] data = p.getBinaryValue();
-        assertNotNull(data);
-        assertArrayEquals(RESULT_BYTES, data);
-        p.close();
-    }
-
-    private void _testInArray(int mode) throws IOException
-    {
-        JsonFactory f = new JsonFactory();
-
-        final int entryCount = 7;
-
-        StringWriter sw = new StringWriter();
-        JsonGenerator jg = f.createGenerator(sw);
-        jg.writeStartArray();
-
-        byte[][] entries = new byte[entryCount][];
-        for (int i = 0; i < entryCount; ++i) {
-            byte[] b = new byte[200 + i * 100];
-            for (int x = 0; x < b.length; ++x) {
-                b[x] = (byte) (i + x);
-            }
-            entries[i] = b;
-            jg.writeBinary(b);
-        }
-
-        jg.writeEndArray();
-        jg.close();
-
-        JsonParser p = createParser(f, mode, sw.toString());
-
-        assertToken(JsonToken.START_ARRAY, p.nextToken());
-
-        for (int i = 0; i < entryCount; ++i) {
-            assertToken(JsonToken.VALUE_STRING, p.nextToken());
-            byte[] b = p.getBinaryValue();
-            assertArrayEquals(entries[i], b);
-        }
-        assertToken(JsonToken.END_ARRAY, p.nextToken());
-        p.close();
-    }
-
-    private void _testEscaped(int mode) throws IOException
-    {
-        // Input: "Test!" -> "VGVzdCE="
-
-        // First, try with embedded linefeed half-way through:
-
-        String DOC = quote("VGVz\\ndCE="); // note: must double-quote to get linefeed
-        JsonParser p = createParser(mode, DOC);
-        assertToken(JsonToken.VALUE_STRING, p.nextToken());
-        byte[] b = p.getBinaryValue();
-        assertEquals("Test!", new String(b, "US-ASCII"));
-        if (mode != MODE_DATA_INPUT) {
-            assertNull(p.nextToken());
-        }
-        p.close();
-
-        // and then with escaped chars
-//            DOC = quote("V\\u0047V\\u007AdCE="); // note: must escape backslash...
-        DOC = quote("V\\u0047V\\u007AdCE="); // note: must escape backslash...
-        p = createParser(mode, DOC);
-        assertToken(JsonToken.VALUE_STRING, p.nextToken());
-        b = p.getBinaryValue();
-        assertEquals("Test!", new String(b, "US-ASCII"));
-        if (mode != MODE_DATA_INPUT) {
-            assertNull(p.nextToken());
-        }
-        p.close();
-    }
 }
diff --git a/src/test/java/com/fasterxml/jackson/core/read/TestJsonParserBinary.java b/src/test/java/com/fasterxml/jackson/core/read/TestJsonParserBinary.java
new file mode 100644
index 00000000..3c5801c8
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/core/read/TestJsonParserBinary.java
@@ -0,0 +1,139 @@
+package com.fasterxml.jackson.core.read;
+
+import java.io.*;
+
+import com.fasterxml.jackson.core.*;
+
+import static org.junit.Assert.*;
+
+/**
+ * Tests for verifying that accessing base64 encoded content works ok.
+ */
+public class TestJsonParserBinary
+    extends com.fasterxml.jackson.core.BaseTest
+{
+    /*
+    /**********************************************************************
+    /* Unit tests
+    /**********************************************************************
+     */
+
+    public void testSimple() throws IOException
+    {
+        for (int mode : ALL_MODES) {
+            _testSimple(mode);
+        }
+    }
+
+    public void testInArray() throws IOException
+    {
+        for (int mode : ALL_MODES) {
+            _testInArray(mode);
+        }
+    }
+
+    public void testWithEscaped() throws IOException {
+        for (int mode : ALL_MODES) {
+            _testEscaped(mode);
+        }
+    }
+
+    /*
+    /**********************************************************************
+    /* Actual test methods
+    /**********************************************************************
+     */
+
+    private void _testSimple(int mode)
+        throws IOException
+    {
+        /* The usual sample input string, from Thomas Hobbes's "Leviathan"
+         * (via Wikipedia)
+         */
+        final String RESULT = "Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.";
+        final byte[] RESULT_BYTES = RESULT.getBytes("US-ASCII");
+
+        // And here's what should produce it...
+        final String INPUT_STR = 
+ "TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz"
++"IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg"
++"dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu"
++"dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo"
++"ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4="
+            ;
+
+        final String DOC = "\""+INPUT_STR+"\"";
+        JsonParser p = createParser(mode, DOC);
+
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        byte[] data = p.getBinaryValue();
+        assertNotNull(data);
+        assertArrayEquals(RESULT_BYTES, data);
+        p.close();
+    }
+
+    private void _testInArray(int mode) throws IOException
+    {
+        JsonFactory f = new JsonFactory();
+
+        final int entryCount = 7;
+
+        StringWriter sw = new StringWriter();
+        JsonGenerator jg = f.createGenerator(sw);
+        jg.writeStartArray();
+
+        byte[][] entries = new byte[entryCount][];
+        for (int i = 0; i < entryCount; ++i) {
+            byte[] b = new byte[200 + i * 100];
+            for (int x = 0; x < b.length; ++x) {
+                b[x] = (byte) (i + x);
+            }
+            entries[i] = b;
+            jg.writeBinary(b);
+        }
+
+        jg.writeEndArray();
+        jg.close();
+
+        JsonParser p = createParser(f, mode, sw.toString());
+
+        assertToken(JsonToken.START_ARRAY, p.nextToken());
+
+        for (int i = 0; i < entryCount; ++i) {
+            assertToken(JsonToken.VALUE_STRING, p.nextToken());
+            byte[] b = p.getBinaryValue();
+            assertArrayEquals(entries[i], b);
+        }
+        assertToken(JsonToken.END_ARRAY, p.nextToken());
+        p.close();
+    }
+
+    private void _testEscaped(int mode) throws IOException
+    {
+        // Input: "Test!" -> "VGVzdCE="
+
+        // First, try with embedded linefeed half-way through:
+
+        String DOC = quote("VGVz\\ndCE="); // note: must double-quote to get linefeed
+        JsonParser p = createParser(mode, DOC);
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        byte[] b = p.getBinaryValue();
+        assertEquals("Test!", new String(b, "US-ASCII"));
+        if (mode != MODE_DATA_INPUT) {
+            assertNull(p.nextToken());
+        }
+        p.close();
+
+        // and then with escaped chars
+//        DOC = quote("V\\u0047V\\u007AdCE="); // note: must escape backslash...
+        DOC = quote("V\\u0047V\\u007AdCE="); // note: must escape backslash...
+        p = createParser(mode, DOC);
+        assertToken(JsonToken.VALUE_STRING, p.nextToken());
+        b = p.getBinaryValue();
+        assertEquals("Test!", new String(b, "US-ASCII"));
+        if (mode != MODE_DATA_INPUT) {
+            assertNull(p.nextToken());
+        }
+        p.close();
+    }
+}
